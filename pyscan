#!/usr/bin/env python3
"Program to scan python codebase cross dependecies"

import os
import sys
import logging
import argparse
from pathlib import Path


DIR = Path(__file__).parent


class PythonVerionError(Exception):
    "Exception for wrong python version"


def version_check():
    """Function to check python version.

    Raises:
        PythonVerionError: Raised when wrong python version is used.
    """
    ver_major, ver_minor, *_ = sys.version_info
    if ver_major < 3 and ver_minor < 7:
        raise PythonVerionError("Please use python 3.7 and above.")


def get_args() -> argparse.Namespace:
    """Input parameters parser.

    Returns:
      Namespace of stdin parameters.
    """
    parser = argparse.ArgumentParser(description="Python codebase scanner.")

    parser.add_argument(
        "-i",
        "--path-codebase",
        help="Path to the codebase to analyse.",
        type=str,
        default=DIR,
        required=False,
    )

    parser.add_argument(
        "-o",
        "--path-output",
        help="Path to store the output results.",
        type=str,
        default=DIR,
        required=False,
    )

    args = parser.parse_args()
    return args


def main(path_codebase: str, path_output: str) -> None:
    """Main runner.

    Args:
        path_codebase: Path to the codebase to analyse.
        path_output: Path to store the output results.
    """
    raise Exception("test")


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s.%(msecs)03d [pid:%(process)d] [%(levelname)-5s] %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )
    logger = logging.getLogger("pyscan")

    try:
        version_check()
        args = get_args()
        main(path_codebase=args.path_codebase, path_output=args.path_output)
    except Exception as ex:
        logger.error(ex)
        sys.exit(1)
